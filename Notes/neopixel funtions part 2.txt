def pixels_show(): 
	dimmer_ar = array.array("I", [0 for _ in range(NUM_LEDS)]) f
	for i,c in enumerate(ar): 
		r = int(((c >> 8) & 0xFF) * brightness)
		g = int(((c >> 16) & 0xFF) * brightness)
		b = int((c & 0xFF) * brightness)
		dimmer_ar[i] = (g<<16) + (r<<8) + b 
	sm.put(dimmer_ar, 8) 
	time.sleep_ms(10) 

def pixels_set(i, color):
	ar[i] = (color[1]<<16) + (color[0]<<8) + color[2]

def pixels_fill(color): 
	for i in range(len(ar)): 
		pixels_set(i, color) 

def color_chase(color, wait):
	for i in range(NUM_LEDS):
		pixels_set(i, color) 
		time.sleep(wait)
		pixel_show()
	time.sleep(0.2)

def wheel(pos)
	#Input a value 0 to 255 to get a color value
	#The colours are a a transition r - g - b - back to r.
	if pos < 0 or pos >255:
		return (0,0,0)
	if pos < 85:
		return (255 - pos * 3, pos * 3, 0)
	if pos < 170:
		pos -= 85
		return (0, 255 - pos * 3, pos * 3)
	pos -= 170
	return (pos * 3, 0, 255 - pos * 3)

def rainbow_cycle(wait):
	for j in range(255):
		for i in range(NUM_LEDS):
			rc_index = (i * 256 // NUM_LEDS) + j
			pixels_set(i, wheel(rc_index & 255))
		pixels_show()
		time.sleep(wait)

BLACK = (0,0,0)
RED = (255,0,0)
YELLOW = (255,150,0)
GREEN = (0,255,0)
CYAN = (0,255,255)
BLUE = (0,0,255) 
PURPLE = (180, 0, 255)
WHITE = (255,255,255)
COLORS = (BLACK, RED, YELLOW, GREEN, CYAN, BLUE, PURPLE, WHITE)		

print("fills")
for color in COLORS:
	pixel_fill(color)
	pixel_show()
	time.sleep(0.2)

print("chases")
for color in COLORS:
	color_chase(color, 0.01)

print("rainbow")
rainbow_cycle(0)